#########################################################################################
## Versao 1.0.1 (20/01/2022) ############################################################
########################### Autores: ####################################################
## Augusto de Lelis Araujo - Federal University of Uberlandia (Uberlandia/MG - Brazil) ##
## e-mail: augusto-lelis@outlook.com                                                   ##
## =================================================================================== ##
## Renan Maciel da Paixao - Uppsala University (Uppsala/Sweden) #########################
## e-mail: renan.maciel@physics.uu.se                           #########################
#########################################################################################

print("#######################################################")
print("## Criacao do arquivo KPOINTS (Malha 3D na ZB): ==== ##")
print("#######################################################")
print(" ")

print("#######################################################")
print("## Pontos-k em Coord. Diretas k1, k2 e k3: ========= ##")
print("## K =  k1*B1 + k2*B2 + k3*B3 ====================== ##")
print("#######################################################")
print("## Vetores Primitivos da Rede Reciproca:")
print(f'## B1 = 2pi/Param.({B1x}, {B1y}, {B1z})')
print(f'## B2 = 2pi/Param.({B2x}, {B2y}, {B2z})')
print(f'## B3 = 2pi/Param.({B3x}, {B3y}, {B3z})')
print(f'## Param. = {Parametro} Angs.')
print("#######################################################")
print(" ")

print("#######################################################")
print(f'## Valor inicial da coordenada k1: ###################')
print("#######################################################")
k1_i = input (" "); k1_i = float(k1_i)
print(" ")

print("#######################################################")
print(f'## Valor final da coordenada k1: #####################')
print("#######################################################")
k1_f = input (" "); k1_f = float(k1_f)
print(" ")

print("#######################################################")
print(f'## Qual o GRID de pontos no eixo-k1: #################')
print("#######################################################")
grid_k1 = input (" "); grid_k1 = int(grid_k1)
print(" ")

print("#######################################################")
print(f'## Valor inicial da coordenada k2: ###################')
print("#######################################################")
k2_i = input (" "); k2_i = float(k2_i)
print(" ")

print("#######################################################")
print(f'## Valor final da coordenada k2: #####################')
print("#######################################################")
k2_f = input (" "); k2_f = float(k2_f)
print(" ")

print("#######################################################")
print(f'## Qual o GRID de pontos no eixo-k2: #################')
print("#######################################################")
grid_k2 = input (" "); grid_k2 = int(grid_k2)
print(" ")

print("#######################################################")
print(f'## Valor inicial da coordenada k3: ###################')
print("#######################################################")
k3_i = input (" "); k3_i = float(k3_i)
print(" ")

print("#######################################################")
print(f'## Valor final da coordenada k3: #####################')
print("#######################################################")
k3_f = input (" "); k3_f = float(k3_f)
print(" ")

print("#######################################################")
print(f'## Qual o GRID de pontos no eixo-k3: #################')
print("#######################################################")
grid_k3 = input (" "); grid_k3 = int(grid_k3)
print(" ")

#---------------------------------------------------------------
# Inicialização dos vetores k1, k2 e k3 ------------------------
#---------------------------------------------------------------

k1 = [0]*(grid_k1 + 1)
k2 = [0]*(grid_k2 + 1)
k3 = [0]*(grid_k3 + 1)

#---------------------------------------------------------------
# Escrita do arquivo KPOINTS -----------------------------------
#---------------------------------------------------------------

#---------------------------------
kpoints = open("saida/KPOINTS.txt", "w")
#---------------------------------

kpoints.write("Bandas_Malha_3D VASProcar \n")
kpoints.write(f'1 \n')
kpoints.write("Line-mode \n")
kpoints.write("Reciprocal \n")

for i in range (1,(grid_k1+1)):
    k1[i] = k1_i + (i-1)*(k1_f - k1_i)/(grid_k1 - 1)
    for j in range (1,(grid_k2+1)):
        k2[j] = k2_i + (j-1)*(k2_f - k2_i)/(grid_k2 - 1)
        for k in range (1,(grid_k3+1)):
            k3[k] = k3_i + (k-1)*(k3_f - k3_i)/(grid_k3 - 1)
            kpoints.write(f'{k1[i]} {k2[j]} {k3[k]} \n')

#--------------
kpoints.close()
#--------------

#---------------------------------------------------------------
# Obtenção das coordenadas cartesianas (kx,ky,kz) dos pontos-k -
# gerados no arquivo KPOINTS -----------------------------------
#---------------------------------------------------------------

#-----------------------------------------------------------
pontos_k = open("saida/pontos_k_Coord_Cartesianas.txt", "w")
#-----------------------------------------------------------

pontos_k.write("Pontos-k do arquivo KPOINTS em Coordenadas Cartesianas (kx,ky,kz) \n")
pontos_k.write("em função de 2pi/Param. \n")
pontos_k.write(" \n")

for i in range (1,(grid_k1+1)):
    for j in range (1,(grid_k2+1)):
        for k in range (1,(grid_k3+1)):
            Coord_X = ((k1[1]*B1x) + (k2[j]*B2x) + (k3[k]*B3x))
            Coord_Y = ((k1[1]*B1y) + (k2[j]*B2y) + (k3[k]*B3y))
            Coord_Z = ((k1[1]*B1z) + (k2[j]*B2z) + (k3[k]*B3z))
            pontos_k.write(f'{Coord_X:.9f} {Coord_Y:.9f} {Coord_Z:.9f} \n')  

#---------------
pontos_k.close()
#---------------

#-----------------------------------------------------------------       

number = grid_k1*grid_k2*grid_k3

print("#######################################################")

if (number < 1000):
   print(f'# O arquivo KPOINTS gerado fornece {number} pontos-k na ZB #')
if (number > 999):
   print(f'# O arquivo KPOINTS gerado fornece {number} pontos-k na ZB ')

print("#######################################################")
print("## Um arquivo com as coordenadas cartesianas dos === ##")
print("## pontos do arquivo KPOINTS esta na pasta saida === ##")
print("#######################################################")

#-----------------------------------------------------------------
print(" ")
print("======================= Concluido =======================")
#-----------------------------------------------------------------

############################################################################################################################################################################################
############################################################################################################################################################################################
#######
####### FIM DO CÓDIGO ######################################################################################################################################################################
#######
############################################################################################################################################################################################
############################################################################################################################################################################################
